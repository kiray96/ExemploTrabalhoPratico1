using System;
using System.Linq;

namespace SimonSays
{
    public class CommandProvider
    {
        private readonly char[] commands;
        private readonly Random random;

        /// <summary>
        /// Initializes a new instance of the <see cref="CommandProvider"/> 
        /// class.
        /// </summary>
        /// <remarks>
        /// This constructor sets up the internal command array used for 
        /// generating command patterns in the Simon Says game and initializes 
        /// the random number generator.
        /// </remarks>
        public CommandProvider()
        {
            commands = new char[] { 'W', 'A', 'S', 'D' };
            // ////////// => TO IMPLEMENT <= //////////// //

            // ************* criar um radom *******************
            random = new Random();
        }


        /// <summary>
        /// Generates a random pattern of commands based on the specified round 
        /// number.
        /// </summary>
        /// <param name="round">An <see cref="int"/> representing the number of 
        /// commands to generate in the pattern.</param>
        /// <returns>
        /// A <see cref="string"/> representing the generated pattern of 
        /// commands. The pattern is composed of randomly 
        /// chosen commands from the array <c>{"W", "A", "S", "D"}</c>, with the
        /// length of the pattern being equal to the round number.
        /// </returns>
        /// <remarks>
        /// The pattern is generated by randomly selecting commands from the 
        /// predefined array of commands ({"W", "A", "S", "D"}) 
        /// and joining them into a single string. The round number determines 
        /// how many commands are included in the pattern.
        /// </remarks>
        public string GeneratePattern(int round)
        {
            // ////////// => TO IMPLEMENT <= //////////// //
            string result = "";

            // ********** adicionar caracter a string por cada round ************
            for ( int i = 0; i < round; i++)
            {
                // ******** para cada iteração adiconar uma cousa dos commands que neste caso é W A S D, ALEATORIAMENTE******
                // ***** carregar no random para ver o que tem e neste caso queriamos o max and min value  para termos o rando
                // nesse array *********
                result += commands[random.Next(0, 4)];
            }
            // ***** SE NÃO É VOID TENHO QUE TER RETURN ********
            return result;
        }
    }
}